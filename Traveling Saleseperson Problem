#include<iostream>
using namespace std;
double min(double a, double b)
{
	return a>b ? b : a;
}
void travel(int n, const double W[4][4], double& minlength)
{
	int i, j, k;
	double D0[4], D1[6], D2[3];

	for(int i=0; i<4; i++)
		D0[i] = W[i][0];
	//D[Vi][empty set]
	
	int count=0;
	for(int i=1; i<4; i++)
		for(int j=1; j<4; j++)
		{
			if(i==j);
			else
				D1[count++]=W[i][j]+D0[j];
		}
	//D[V3][V2], D[V4][v2], ... , D[v3][v4]
	
	count=0;
	for(int i=3; i>0; i--)
	{
		int j,k;
		if(i==1)
		{	
			j=2; k=3; 
			//D[v2][{v3,v4}]
			D2[0] = min(W[i][j]+D1[3], W[i][k]+D1[5]);
					
		}
		else if(i==2)
		{	
			j=1; k=3; 
			//D[v3][{v2,v4}]
			D2[1] = min(W[i][j]+D1[1], W[i][k]+D1[4]);
					
		}
		else if(i==3)
		{	
			j=1; k=2; 
			//D[v4][{v2,v3}]	
			D2[2] = min(W[i][j]+D1[0], W[i][k]+D1[2]);
		}
	}
	//D[v4][{v2,v3}], D[v3][{v2,v4}], D[v2][{v3,v4}]
	
	minlength
	= min(W[0][3]+D2[2] ,min(W[0][1]+D2[0], W[0][2]+D2[1]));

	double p[5]; //finding the path
	p[0]=1, p[4] =1;
	if(minlength==W[0][3]+D2[2])
	{
		p[1] = 4;
		if(D2[2] == W[1][2]+D1[0])
		{
			p[2] = 3;
			p[3] = 2;
		}else
		{
			p[2] = 2;
			p[3] = 3;
		}
	}else if(minlength==W[0][1]+D2[0])
	{
		p[1] = 2;
		if(D2[0] == W[2][3]+D1[3])
		{
			p[2] = 4;
			p[3] = 3;
		}else
		{
			p[2] = 3;
			p[3] = 4;
		}
	}else
	{
		p[1] = 3;
		if(D2[1] == W[1][3]+D1[1])
		{
			p[2] = 4;
			p[3] = 2;
		}else
		{
			p[2] = 4;
			p[3] = 2;
		}
	}

	cout<<endl<<endl<<"Path: ";
	for(int i=0; i<=3; i++) //print the path
		cout<<p[i]<<" -> ";
	cout<<p[4]<<endl;

}
	
int main()
{
	double minlength=0;
	double W[4][4] = { {0, 2, 9, 10000},  //Let's say 10000 were infinite number
         	        	   {1, 0, 6, 4},
            	       	 {10000, 7, 0, 8},
                	   	 {6, 3, 10000, 0}
                  };
	cout<<"Graph:"; //print the graph
	for(int i=0; i<4; i++)
		for(int j=0; j<4; j++)
		{
			if(j==0)
				cout<<"\n[  ";
			cout<<W[i][j];
			if(W[i][j]!=10000)
				cout<<"     ";
			else
				cout<<" ";
			if(j==3)
				cout<<']';
		}
	
	travel(4, W, minlength); //execute TSP algorithm
	cout<<"Minlength:"<<minlength; //print the output(Minlength)
}
